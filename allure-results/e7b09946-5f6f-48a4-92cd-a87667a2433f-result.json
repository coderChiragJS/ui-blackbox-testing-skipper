{"uuid":"e7b09946-5f6f-48a4-92cd-a87667a2433f","historyId":"bbf656037b371e049b27768332d31ba4","status":"broken","statusDetails":{"message":"waitUntil condition failed with the following reason: WebDriverError: Method is not implemented when running \"execute/sync\" with method \"POST\" and args \"function isElementClickable(elem) {\n  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n    return false;\n  }\n  const isOldEdge = !!window.StyleMedia;\n  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n  function getOverlappingElement(elem2, context) {\n    context = context || document;\n    const elemDimension = elem2.getBoundingClientRect();\n    const x = elemDimension.left + elem2.clientWidth / 2;\n    const y = elemDimension.top + elem2.clientHeight / 2;\n    return context.elementFromPoint(x, y);\n  }\n  function getOverlappingRects(elem2, context) {\n    context = context || document;\n    const rects = elem2.getClientRects();\n    const rect = rects[0];\n    const x = rect.left + rect.width / 2;\n    const y = rect.top + rect.height / 2;\n    return [context.elementFromPoint(x, y)];\n  }\n  function getOverlappingElements(elem2, context) {\n    return [getOverlappingElement(elem2, context)].concat(getOverlappingRects(elem2, context));\n  }\n  function nodeContains(elem2, otherNode) {\n    if (isOldEdge) {\n      let tmpElement = otherNode;\n      while (tmpElement) {\n        if (tmpElement === elem2) {\n          return true;\n        }\n        tmpElement = tmpElement.parentNode;\n        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n          tmpElement = tmpElement.host;\n        }\n      }\n      return false;\n    }\n    return elem2.contains(otherNode);\n  }\n  function isOverlappingElementMatch(elementsFromPoint, elem2) {\n    if (elementsFromPoint.some(function(elementFromPoint) {\n      return elementFromPoint === elem2 || nodeContains(elem2, elementFromPoint);\n    })) {\n      return true;\n    }\n    let elemsWithShadowRoot = [].concat(elementsFromPoint);\n    elemsWithShadowRoot = elemsWithShadowRoot.filter(function(x) {\n      return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n    });\n    let shadowElementsFromPoint = [];\n    for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n      const shadowElement = elemsWithShadowRoot[i];\n      shadowElementsFromPoint = shadowElementsFromPoint.concat(\n        getOverlappingElements(elem2, shadowElement.shadowRoot)\n      );\n    }\n    shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n    shadowElementsFromPoint = shadowElementsFromPoint.filter(function(x) {\n      return !elementsFromPoint.includes(x);\n    });\n    if (shadowElementsFromPoint.length === 0) {\n      return false;\n    }\n    return isOverlappingElementMatch(shadowElementsFromPoint, elem2);\n  }\n  function isElementInViewport(elem2) {\n    if (!elem2.getBoundingClientRect) {\n      return false;\n    }\n    const rect = elem2.getBoundingClientRect();\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n    return vertInView && horInView;\n  }\n  function isEnabled(elem2) {\n    return elem2.disabled !== true;\n  }\n  function hasOverlaps(elem2) {\n    return !isOverlappingElementMatch(getOverlappingElements(elem2), elem2);\n  }\n  function isFullyDisplayedInViewport(elem2) {\n    return isElementInViewport(elem2) && !hasOverlaps(elem2);\n  }\n  function getViewportScrollPositions() {\n    return {\n      // Cross-browser compatibility\n      x: window.scrollX !== null && window.scrollX !== void 0 ? window.scrollX : window.pageXOffset,\n      y: window.scrollY !== null && window.scrollY !== void 0 ? window.scrollY : window.pageYOffset\n    };\n  }\n  let _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n  if (!_isFullyDisplayedInViewport) {\n    const { x: originalX, y: originalY } = getViewportScrollPositions();\n    elem.scrollIntoView(scrollIntoViewFullSupport ? { block: \"center\", inline: \"center\" } : false);\n    _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n    const { x: currentX, y: currentY } = getViewportScrollPositions();\n    if (currentX !== originalX || currentY !== originalY) {\n      window.scroll(originalX, originalY);\n    }\n  }\n  return _isFullyDisplayedInViewport && isEnabled(elem);\n}\"","trace":"Error: waitUntil condition failed with the following reason: WebDriverError: Method is not implemented when running \"execute/sync\" with method \"POST\" and args \"function isElementClickable(elem) {\n  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n    return false;\n  }\n  const isOldEdge = !!window.StyleMedia;\n  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n  function getOverlappingElement(elem2, context) {\n    context = context || document;\n    const elemDimension = elem2.getBoundingClientRect();\n    const x = elemDimension.left + elem2.clientWidth / 2;\n    const y = elemDimension.top + elem2.clientHeight / 2;\n    return context.elementFromPoint(x, y);\n  }\n  function getOverlappingRects(elem2, context) {\n    context = context || document;\n    const rects = elem2.getClientRects();\n    const rect = rects[0];\n    const x = rect.left + rect.width / 2;\n    const y = rect.top + rect.height / 2;\n    return [context.elementFromPoint(x, y)];\n  }\n  function getOverlappingElements(elem2, context) {\n    return [getOverlappingElement(elem2, context)].concat(getOverlappingRects(elem2, context));\n  }\n  function nodeContains(elem2, otherNode) {\n    if (isOldEdge) {\n      let tmpElement = otherNode;\n      while (tmpElement) {\n        if (tmpElement === elem2) {\n          return true;\n        }\n        tmpElement = tmpElement.parentNode;\n        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n          tmpElement = tmpElement.host;\n        }\n      }\n      return false;\n    }\n    return elem2.contains(otherNode);\n  }\n  function isOverlappingElementMatch(elementsFromPoint, elem2) {\n    if (elementsFromPoint.some(function(elementFromPoint) {\n      return elementFromPoint === elem2 || nodeContains(elem2, elementFromPoint);\n    })) {\n      return true;\n    }\n    let elemsWithShadowRoot = [].concat(elementsFromPoint);\n    elemsWithShadowRoot = elemsWithShadowRoot.filter(function(x) {\n      return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n    });\n    let shadowElementsFromPoint = [];\n    for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n      const shadowElement = elemsWithShadowRoot[i];\n      shadowElementsFromPoint = shadowElementsFromPoint.concat(\n        getOverlappingElements(elem2, shadowElement.shadowRoot)\n      );\n    }\n    shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n    shadowElementsFromPoint = shadowElementsFromPoint.filter(function(x) {\n      return !elementsFromPoint.includes(x);\n    });\n    if (shadowElementsFromPoint.length === 0) {\n      return false;\n    }\n    return isOverlappingElementMatch(shadowElementsFromPoint, elem2);\n  }\n  function isElementInViewport(elem2) {\n    if (!elem2.getBoundingClientRect) {\n      return false;\n    }\n    const rect = elem2.getBoundingClientRect();\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n    return vertInView && horInView;\n  }\n  function isEnabled(elem2) {\n    return elem2.disabled !== true;\n  }\n  function hasOverlaps(elem2) {\n    return !isOverlappingElementMatch(getOverlappingElements(elem2), elem2);\n  }\n  function isFullyDisplayedInViewport(elem2) {\n    return isElementInViewport(elem2) && !hasOverlaps(elem2);\n  }\n  function getViewportScrollPositions() {\n    return {\n      // Cross-browser compatibility\n      x: window.scrollX !== null && window.scrollX !== void 0 ? window.scrollX : window.pageXOffset,\n      y: window.scrollY !== null && window.scrollY !== void 0 ? window.scrollY : window.pageYOffset\n    };\n  }\n  let _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n  if (!_isFullyDisplayedInViewport) {\n    const { x: originalX, y: originalY } = getViewportScrollPositions();\n    elem.scrollIntoView(scrollIntoViewFullSupport ? { block: \"center\", inline: \"center\" } : false);\n    _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n    const { x: currentX, y: currentY } = getViewportScrollPositions();\n    if (currentX !== originalX || currentY !== originalY) {\n      window.scroll(originalX, originalY);\n    }\n  }\n  return _isFullyDisplayedInViewport && isEnabled(elem);\n}\"\n    ---\n  if (!elem.getBoundingClientRect || !elem.scrollIntoView || !elem.contains || !elem.getClientRects || !document.elementFromPoint) {\n    return false;\n  }\n  const isOldEdge = !!window.StyleMedia;\n  const scrollIntoViewFullSupport = !(window.safari || isOldEdge);\n  function getOverlappingElement(elem2, context) {\n    context = context || document;\n    const elemDimension = elem2.getBoundingClientRect();\n    const x = elemDimension.left + elem2.clientWidth / 2;\n    const y = elemDimension.top + elem2.clientHeight / 2;\n    return context.elementFromPoint(x, y);\n  }\n  function getOverlappingRects(elem2, context) {\n    context = context || document;\n    const rects = elem2.getClientRects();\n    const rect = rects[0];\n    const x = rect.left + rect.width / 2;\n    const y = rect.top + rect.height / 2;\n    return [context.elementFromPoint(x, y)];\n  }\n  function getOverlappingElements(elem2, context) {\n    return [getOverlappingElement(elem2, context)].concat(getOverlappingRects(elem2, context));\n  }\n  function nodeContains(elem2, otherNode) {\n    if (isOldEdge) {\n      let tmpElement = otherNode;\n      while (tmpElement) {\n        if (tmpElement === elem2) {\n          return true;\n        }\n        tmpElement = tmpElement.parentNode;\n        if (tmpElement && tmpElement.nodeType === 11 && tmpElement.host) {\n          tmpElement = tmpElement.host;\n        }\n      }\n      return false;\n    }\n    return elem2.contains(otherNode);\n  }\n  function isOverlappingElementMatch(elementsFromPoint, elem2) {\n    if (elementsFromPoint.some(function(elementFromPoint) {\n      return elementFromPoint === elem2 || nodeContains(elem2, elementFromPoint);\n    })) {\n      return true;\n    }\n    let elemsWithShadowRoot = [].concat(elementsFromPoint);\n    elemsWithShadowRoot = elemsWithShadowRoot.filter(function(x) {\n      return x && x.shadowRoot && x.shadowRoot.elementFromPoint;\n    });\n    let shadowElementsFromPoint = [];\n    for (let i = 0; i < elemsWithShadowRoot.length; ++i) {\n      const shadowElement = elemsWithShadowRoot[i];\n      shadowElementsFromPoint = shadowElementsFromPoint.concat(\n        getOverlappingElements(elem2, shadowElement.shadowRoot)\n      );\n    }\n    shadowElementsFromPoint = [].concat(shadowElementsFromPoint);\n    shadowElementsFromPoint = shadowElementsFromPoint.filter(function(x) {\n      return !elementsFromPoint.includes(x);\n    });\n    if (shadowElementsFromPoint.length === 0) {\n      return false;\n    }\n    return isOverlappingElementMatch(shadowElementsFromPoint, elem2);\n  }\n  function isElementInViewport(elem2) {\n    if (!elem2.getBoundingClientRect) {\n      return false;\n    }\n    const rect = elem2.getBoundingClientRect();\n    const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n    const windowWidth = window.innerWidth || document.documentElement.clientWidth;\n    const vertInView = rect.top <= windowHeight && rect.top + rect.height > 0;\n    const horInView = rect.left <= windowWidth && rect.left + rect.width > 0;\n    return vertInView && horInView;\n  }\n  function isEnabled(elem2) {\n    return elem2.disabled !== true;\n  }\n  function hasOverlaps(elem2) {\n    return !isOverlappingElementMatch(getOverlappingElements(elem2), elem2);\n  }\n  function isFullyDisplayedInViewport(elem2) {\n    return isElementInViewport(elem2) && !hasOverlaps(elem2);\n  }\n  function getViewportScrollPositions() {\n    return {\n      // Cross-browser compatibility\n      x: window.scrollX !== null && window.scrollX !== void 0 ? window.scrollX : window.pageXOffset,\n      y: window.scrollY !== null && window.scrollY !== void 0 ? window.scrollY : window.pageYOffset\n    };\n  }\n  let _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n  if (!_isFullyDisplayedInViewport) {\n    const { x: originalX, y: originalY } = getViewportScrollPositions();\n    elem.scrollIntoView(scrollIntoViewFullSupport ? { block: \"center\", inline: \"center\" } : false);\n    _isFullyDisplayedInViewport = isFullyDisplayedInViewport(elem);\n    const { x: currentX, y: currentY } = getViewportScrollPositions();\n    if (currentX !== originalX || currentY !== originalY) {\n      window.scroll(originalX, originalY);\n    }\n  }\n  return _isFullyDisplayedInViewport && isEnabled(elem);\n}\"\n    at async LoginPage.waitForClickable (/Users/chiragtankwal/projects/ui-test-blackbox/test/pageobjects/base/BasePage.js:26:9)\n    at async LoginPage.safeClick (/Users/chiragtankwal/projects/ui-test-blackbox/test/pageobjects/base/BasePage.js:33:9)\n    at async LoginPage.selectCountryCode (/Users/chiragtankwal/projects/ui-test-blackbox/test/pageobjects/login/LoginPage.js:57:9)"},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"e4c04838-11ca-459b-bbed-56909c7f22a7-attachment.png"},{"name":"Screenshot","type":"image/png","source":"dc75f21a-3d02-4bbd-8d69-2b64811f40ff-attachment.png"},{"name":"Screenshot","type":"image/png","source":"cc496e25-8854-4533-9028-368da949a47a-attachment.png"}],"parameters":[{"name":"device","value":"skipper11-2025-08-25-debug.apk"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":".Users.chiragtankwal.projects.ui-test-blackbox.test.specs.smoke.login.smoke.test.js"},{"name":"thread","value":"0-0"},{"name":"suite","value":"Login Smoke Tests"},{"name":"feature","value":"Login Smoke Tests"}],"links":[],"start":1756359743620,"name":"should successfully login with valid credentials","testCaseId":"bbf656037b371e049b27768332d31ba4","stop":1756359760315}